<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Easy handling for bit wise enumerations</Title>
      <Shortcut>MySnippet_EnumerationExtension</Shortcut>
      <Description>Allows easy handling of enumeration for bit wise implementation.</Description>
      <Author>Hubert Stärk</Author>
    </Header>
    <Snippet>
      <Code Language="CSharp">
        <![CDATA[
			
			[FlagsAttribute]
			public enum MyEnumeration
			{ 
				OK = 1,
				Attention = 2, 
				Warning = 4, 
				Error = 8,
				Disaster = 16,
			}
			
			private static MyEnumeration GetMostSevere( MyEnumeration e )
			{
				MyEnumeration mostSevere = MyEnumeration.OK;
				foreach ( MyEnumeration enumeration in Enum.GetValues( typeof( MyEnumeration ) ) )
				{
					if ( e.Has( enumeration ) )
						mostSevere = enumeration;
				}
				return mostSevere;
			}
	
			public static class EnumerationExtensions
			{
				public static bool Has<T>( this Enum type, T value )
				{
					try
					{
						return ( ( (int) (object) type & (int) (object) value ) == (int) (object) value );
					}
					catch
					{
						return false;
					}
				}

				public static bool Is<T>( this Enum type, T value )
				{
					try
					{
						return (int) (object) type == (int) (object) value;
					}
					catch
					{
						return false;
					}
				}

				public static T Add<T>( this Enum type, T value )
				{
					try
					{
						return (T) (object) ( ( (int) (object) type | (int) (object) value ) );
					}
					catch ( Exception ex )
					{
						throw new ArgumentException(
							string.Format(
								"Could not append value from enumerated type '{0}'.",
								typeof( T ).Name
								), ex );
					}
				}
				
				public static T Remove<T>( this Enum type, T value )
				{
					try
					{
						return (T) (object) ( ( (int) (object) type & ~(int) (object) value ) );
					}
					catch ( Exception ex )
					{
						throw new ArgumentException(
							string.Format(
								"Could not remove value from enumerated type '{0}'.",
								typeof( T ).Name
								), ex );
					}
				}
			}
		
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>

